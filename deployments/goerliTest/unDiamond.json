{
  "address": "0x312a5d413A43a449b8CecfAAc83c7Ea1a5fAb13d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "untradingManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "managerCut",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondWritable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritable.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondWritable.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondReadable.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x42be153f45bb9528d7a36d319866a9baa9252b376b601d39b9130539032af62c",
  "receipt": {
    "to": null,
    "from": "0xD43bCD14529099f141897CBb522Ef6197f4b1Cae",
    "contractAddress": "0x312a5d413A43a449b8CecfAAc83c7Ea1a5fAb13d",
    "transactionIndex": 21,
    "gasUsed": "2641628",
    "logsBloom": "0x
    "blockHash": "0x0bce46be980006104fd0c98c03b73f7be93abbaab486e3862d8b39266e321bb8",
    "transactionHash": "0x42be153f45bb9528d7a36d319866a9baa9252b376b601d39b9130539032af62c",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 7841509,
        "transactionHash": "0x42be153f45bb9528d7a36d319866a9baa9252b376b601d39b9130539032af62c",
        "address": "0x312a5d413A43a449b8CecfAAc83c7Ea1a5fAb13d",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000312a5d413a43a449b8cecfaac83c7ea1a5fab13d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c1f931c1c000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000adfca15e0000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000008ab5150a00000000000000000000000000000000000000000000000000000000f2fde38b0000000000000000000000000000000000000000000000000000000079ba5097000000000000000000000000000000000000000000000000000000002c4080590000000000000000000000000000000000000000000000000000000091423765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 100,
        "blockHash": "0x0bce46be980006104fd0c98c03b73f7be93abbaab486e3862d8b39266e321bb8"
      }
    ],
    "blockNumber": 7841509,
    "cumulativeGasUsed": "7489685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD43bCD14529099f141897CBb522Ef6197f4b1Cae",
    "0",
    "untrading Shared Contract",
    "unNFT",
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "8f1572eef8a79e37811d4889f88af51f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"untradingManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managerCut\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritable.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritable.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization function call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional target of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"getFallbackAddress()\":{\"returns\":{\"_0\":\"fallback address\"}},\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"setFallbackAddress(address)\":{\"params\":{\"fallbackAddress\":\"fallback address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update diamond facets and optionally execute arbitrary initialization function\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"getFallbackAddress()\":{\"notice\":\"get the address of the fallback contract\"},\"nomineeOwner()\":{\"notice\":\"get the nominated owner who has permission to call acceptOwnership\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"setFallbackAddress(address)\":{\"notice\":\"set the address of the fallback contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/unDiamond.sol\":\"unDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/access/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0x3ca3488175483688dfa4ee0a376eefd6e453570f4fe560a5f3b155b50ed058b5\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {}\\n\",\"keccak256\":\"0x274142e420e9b2ceab2d81a844f0036fb13afc7f0647fab7ff54289db5b0818a\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\n\\ninterface ISafeOwnable is IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x6d321531723ca42e2492dbee44c64c75e454b234bf770f74151819fecdc5870a\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {}\\n\",\"keccak256\":\"0xc062acc81046fe730bbba85b3ca47e601f5634f2e2b7943d2d87f7d45853a8e7\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x0eb61e3aba90372bacd1deb50f843baeddb7386b876befa13b501bc02d980e30\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IERC173 } from '../IERC173.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), 'Ownable: sender must be owner');\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        require(\\n            msg.sender == _transitiveOwner(),\\n            'Ownable: sender must be transitive owner'\\n        );\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address) {\\n        address owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                return owner;\\n            }\\n        }\\n\\n        return owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0x550a20b31a45bc9d612418912cae6cf34fee312a004d8fe3b6fce973fa6c7dba\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xe09e65996cbd1db41f051e265e4261438b0ec08ed385be2b0727a88554dbc192\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable, OwnableStorage } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(address account)\\n        internal\\n        virtual\\n        override(OwnableInternal, SafeOwnableInternal)\\n    {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xfa74db2c0a66f38e7ca206b4e42230e0fa853db6539c13003bcef596a33d330b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    modifier onlyNomineeOwner() {\\n        require(\\n            msg.sender == _nomineeOwner(),\\n            'SafeOwnable: sender must be nominee owner'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, msg.sender);\\n        l.setOwner(msg.sender);\\n        SafeOwnableStorage.layout().setNomineeOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().setNomineeOwner(account);\\n    }\\n}\\n\",\"keccak256\":\"0x6c6b5ecd6a2da51df5409d1e918546aa672ddbc522a45facee6a7d54858f4bbf\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setNomineeOwner(Layout storage l, address nomineeOwner) internal {\\n        l.nomineeOwner = nomineeOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x90003d0de9e2e18397419d462afc81fa069c39f44ec9f6436266fc98750a8242\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc2f46bfe115615fe1453ba72b1ae574e0ad366a7c1290930247ddc401beed861\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x4b7e18fa050b73c05c5fa3142a781f4d3c39350ee10ceb11001d53c36128aa5f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41fd520e7dcfe254d7a2bd9463d661a481c3b55ba4d508c1dcbc071ea7777fba\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0xe7d27c7bcd643e57c424021ca0165a92af24bcc352f92e4b2ce54bd6005f1776\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation.isContract(),\\n            'Proxy: implementation must be contract'\\n        );\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0xb220a3840c3d99bd91ac426babebfa49b20f2e23287c40a0a77ae252e5095038\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n\\n    /**\\n     * @notice get the address of the fallback contract\\n     * @return fallback address\\n     */\\n    function getFallbackAddress() external view returns (address);\\n\\n    /**\\n     * @notice set the address of the fallback contract\\n     * @param fallbackAddress fallback address\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0xb089f900780e310797163bdc77904db5af0616839260efea48f3002b8ce257e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable, Ownable, OwnableInternal, OwnableStorage } from '../../access/ownable/Ownable.sol';\\nimport { ISafeOwnable, SafeOwnable } from '../../access/ownable/SafeOwnable.sol';\\nimport { IERC173 } from '../../access/IERC173.sol';\\nimport { ERC165, IERC165, ERC165Storage } from '../../introspection/ERC165.sol';\\nimport { DiamondBase, DiamondBaseStorage } from './base/DiamondBase.sol';\\nimport { DiamondReadable, IDiamondReadable } from './readable/DiamondReadable.sol';\\nimport { DiamondWritable, IDiamondWritable } from './writable/DiamondWritable.sol';\\nimport { ISolidStateDiamond } from './ISolidStateDiamond.sol';\\n\\n/**\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\n */\\nabstract contract SolidStateDiamond is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondReadable,\\n    DiamondWritable,\\n    SafeOwnable,\\n    ERC165\\n{\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    constructor() {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        bytes4[] memory selectors = new bytes4[](12);\\n\\n        // register DiamondWritable\\n\\n        selectors[0] = IDiamondWritable.diamondCut.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[1] = IDiamondReadable.facets.selector;\\n        selectors[2] = IDiamondReadable.facetFunctionSelectors.selector;\\n        selectors[3] = IDiamondReadable.facetAddresses.selector;\\n        selectors[4] = IDiamondReadable.facetAddress.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[5] = IERC165.supportsInterface.selector;\\n\\n        erc165.setSupportedInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n\\n        selectors[6] = Ownable.owner.selector;\\n        selectors[7] = SafeOwnable.nomineeOwner.selector;\\n        selectors[8] = Ownable.transferOwnership.selector;\\n        selectors[9] = SafeOwnable.acceptOwnership.selector;\\n\\n        erc165.setSupportedInterface(type(IERC173).interfaceId, true);\\n\\n        // register Diamond\\n\\n        selectors[10] = SolidStateDiamond.getFallbackAddress.selector;\\n        selectors[11] = SolidStateDiamond.setFallbackAddress.selector;\\n\\n        // diamond cut\\n\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\n\\n        facetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: IDiamondWritable.FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, address(0), '');\\n\\n        // set owner\\n\\n        OwnableStorage.layout().setOwner(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @inheritdoc ISolidStateDiamond\\n     */\\n    function getFallbackAddress() external view returns (address) {\\n        return DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @inheritdoc ISolidStateDiamond\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n\\n    function _transferOwnership(address account)\\n        internal\\n        virtual\\n        override(OwnableInternal, SafeOwnable)\\n    {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x312eaa36649de2679e6c1714ab99db61183803f01c94b7f18978af4c573e287d\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation() internal view override returns (address) {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        address implementation = address(bytes20(l.facets[msg.sig]));\\n\\n        if (implementation == address(0)) {\\n            implementation = l.fallbackAddress;\\n            require(\\n                implementation != address(0),\\n                'DiamondBase: no facet found for function signature'\\n            );\\n        }\\n\\n        return implementation;\\n    }\\n}\\n\",\"keccak256\":\"0xa110a3fe5a23d99a27e2a6cabbdc22736f8d9a91177af9b61915ea503873f983\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IDiamondWritable } from '../writable/IDiamondWritable.sol';\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    using AddressUtils for address;\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    event DiamondCut(\\n        IDiamondWritable.FacetCut[] facetCuts,\\n        address target,\\n        bytes data\\n    );\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param l storage layout\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function diamondCut(\\n        Layout storage l,\\n        IDiamondWritable.FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                IDiamondWritable.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondWritable.FacetCutAction action = facetCut.action;\\n\\n                require(\\n                    facetCut.selectors.length > 0,\\n                    'DiamondBase: no selectors specified'\\n                );\\n\\n                if (action == IDiamondWritable.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = l.addFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == IDiamondWritable.FacetCutAction.REPLACE) {\\n                    l.replaceFacetSelectors(facetCut);\\n                } else if (action == IDiamondWritable.FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = l.removeFacetSelectors(\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            initialize(target, data);\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondWritable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(this) ||\\n                    facetCut.target.isContract(),\\n                'DiamondBase: ADD target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    'DiamondBase: selector already added'\\n                );\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondWritable.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(\\n                facetCut.target == address(0),\\n                'DiamondBase: REMOVE target must be zero address'\\n            );\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    address(bytes20(oldFacet)) != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(\\n        Layout storage l,\\n        IDiamondWritable.FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            require(\\n                facetCut.target.isContract(),\\n                'DiamondBase: REPLACE target has no code'\\n            );\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(\\n                    oldFacetAddress != address(0),\\n                    'DiamondBase: selector not found'\\n                );\\n\\n                require(\\n                    oldFacetAddress != address(this),\\n                    'DiamondBase: selector is immutable'\\n                );\\n\\n                require(\\n                    oldFacetAddress != facetCut.target,\\n                    'DiamondBase: REPLACE target is identical'\\n                );\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function initialize(address target, bytes memory data) private {\\n        require(\\n            (target == address(0)) == (data.length == 0),\\n            'DiamondBase: invalid initialization parameters'\\n        );\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                require(\\n                    target.isContract(),\\n                    'DiamondBase: initialization target has no code'\\n                );\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2aa1f19b9e3cd5cd7702eb0816af486841a367a9840f712019ab2112fd954a70\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x3329852027ffb50519a245376a1dee8f828223c0fa439bbb16a80a1bc226c2fa\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet)\\n    {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x337b2a9b986934df6f426eb7e9a8ec5f294db0bbe04b29a7d5526cf0ff897515\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(address facet)\\n        external\\n        view\\n        returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(bytes4 selector)\\n        external\\n        view\\n        returns (address facet);\\n}\\n\",\"keccak256\":\"0xfe2a5a754ba159411e162e99dad87b49edd5af6c429bbfdd801ca49da17f5f85\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is IDiamondWritable, OwnableInternal {\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        DiamondBaseStorage.layout().diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x0a641ac8e2b6f4d8084ecf63c37215e061f27966b821b534f69ffea1d6408dcf\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5631a54da83a44323de9018f57d0874b448ac7123adbf0c9210c484419c7365d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool status);\\n}\\n\",\"keccak256\":\"0x65682d679d089e5b26dabb215f21b495e9cec64001f9b95ce03dcc2b1a0f36ee\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71f8130712084d73c37195324325d9af09f17f0de66a76fa898dfbb573e07fb3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        require(value == 0, 'UintUtils: hex length insufficient');\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x4c03c6cee3d8e4d9247fd3f61c4b4a711c52d3ed4026af3ad2ab51439af6b2a5\",\"license\":\"MIT\"},\"contracts/InFR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@solidstate/contracts/introspection/IERC165.sol\\\";\\n\\n/*\\n *\\n * @dev Interface for the Future Rewards Token Standard.\\n *\\n * A standardized way to receive future rewards for non-fungible tokens (NFTs.)\\n *\\n */\\ninterface InFR is IERC165 {\\n\\n    event FRClaimed(address indexed account, uint256 indexed amount);\\n\\n    event FRDistributed(uint256 indexed tokenId, uint256 indexed soldPrice, uint256 indexed allocatedFR);\\n\\n    function list(uint256 tokenId, uint256 salePrice) external;\\n\\n    function unlist(uint256 tokenId) external;\\n\\n    function buy(uint256 tokenId) payable external;\\n\\n    function releaseFR(address payable account) external;\\n\\n    function retrieveFRInfo(uint256 tokenId) external returns(uint8, uint256, uint256, uint256, uint256, address[] memory);\\n\\n    function retrieveAllottedFR(address account) external returns(uint256);\\n\\n    function retrieveListInfo(uint256 tokenId) external returns(uint256, address, bool);\\n    \\n}\",\"keccak256\":\"0x31c3a566ffbf4076114f3b5be917d635aaacb5bed3b9d60cb4acc60dc1bd3697\",\"license\":\"MIT\"},\"contracts/unDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\\\";\\nimport {IERC165} from \\\"@solidstate/contracts/introspection/IERC165.sol\\\";\\nimport {ERC165Storage} from \\\"@solidstate/contracts/introspection/ERC165Storage.sol\\\";\\nimport {ERC721MetadataStorage} from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\nimport {IERC721} from \\\"@solidstate/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./InFR.sol\\\";\\nimport \\\"./unFacetStorage.sol\\\";\\n\\ncontract unDiamond is SolidStateDiamond {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    constructor(\\n        address untradingManager,\\n        uint256 managerCut,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) {\\n        require(managerCut <= 1e18, \\\"managerCut exceeds 100%\\\");\\n        // Init the ERC721 Metadata for the unNFT Shared Contract\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n        l.name = name;\\n        l.symbol = symbol;\\n        l.baseURI = baseURI;\\n\\n        // Declare all interfaces supported by the Diamond\\n        ERC165Storage.layout().setSupportedInterface(\\n            type(IERC165).interfaceId,\\n            true\\n        );\\n        ERC165Storage.layout().setSupportedInterface(\\n            type(IERC721).interfaceId,\\n            true\\n        );\\n        ERC165Storage.layout().setSupportedInterface(\\n            type(InFR).interfaceId,\\n            true\\n        );\\n\\n        // Init the manager and managerCut used by oTokens\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        f.untradingManager = untradingManager;\\n        f.managerCut = managerCut;\\n    }\\n}\\n\",\"keccak256\":\"0x161c84392f8812c2988937055a77dcfdfffdd243b7acac4215d15f20b7bea02a\",\"license\":\"MIT\"},\"contracts/unFacetStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary unFacetStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"unFacet.nFR.facet.contract.storage\\\");\\n\\n    struct oToken {\\n        address[] holders; // The addresses receiving the oToken cut of profit\\n        mapping(address => uint256) amount; // The amount of tokens each holder has\\n        uint256 ORatio; // The percentage of the profit\\n        uint256 rewardRatio; // The percentage of profit allocated to both FR and OR\\n    }\\n\\n    struct Layout {\\n        address untradingManager;\\n        uint256 managerCut; // This is the cut of the oTokens that the untradingManager gets\\n\\n        mapping(uint256 => oToken) _oTokens; // Mapping that represents the oToken information for a given tokenId\\n\\n        mapping(address => uint256) _allottedOR; // Mapping that represents the OR (in Ether) allotted for a given address\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x824bdf55b172675aa73cca2c32e0d8a7fa2a5dbbbaf606afc945fb8bf44f11a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200390038038062003900833981016040819052620000349162001391565b60006200004b6200061e60201b62000ee71760201c565b60408051600c8082526101a08201909252919250600091906020820161018080368337019050509050631f931c1c60e01b816000815181106200009257620000926200144d565b6001600160e01b0319909216602092830291909101820152620000cc9083906307e4c70760e21b9060019062000f0b62000642821b17901c565b637a0ed62760e01b81600181518110620000ea57620000ea6200144d565b6001600160e01b03199092166020928302919091019091015280516356fe50af60e11b90829060029081106200012457620001246200144d565b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060039081106200015e576200015e6200144d565b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b90829060049081106200019857620001986200144d565b6001600160e01b0319909216602092830291909101820152620001d29083906348e2b09360e01b9060019062000f0b62000642821b17901c565b6301ffc9a760e01b81600581518110620001f057620001f06200144d565b6001600160e01b03199092166020928302919091018201526200022a9083906301ffc9a760e01b9060019062000f0b62000642821b17901c565b638da5cb5b60e01b816006815181106200024857620002486200144d565b6001600160e01b031990921660209283029190910190910152805163455a8a8560e11b90829060079081106200028257620002826200144d565b6001600160e01b031990921660209283029190910190910152805163f2fde38b60e01b9082906008908110620002bc57620002bc6200144d565b6001600160e01b03199092166020928302919091019091015280516379ba509760e01b9082906009908110620002f657620002f66200144d565b6001600160e01b0319909216602092830291909101820152620003309083906307f5828d60e41b9060019062000f0b62000642821b17901c565b632c40805960e01b81600a815181106200034e576200034e6200144d565b6001600160e01b0319909216602092830291909101909101528051639142376560e01b908290600b9081106200038857620003886200144d565b6001600160e01b03199290921660209283029190910190910152604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081620003b9579050506040805160608101909152308152909150602081016000815260200183815250816000815181106200041f576200041f6200144d565b60200260200101819052506200046c8160006040518060200160405280600081525062000456620006cc60201b62000f931760201c565b620006f060201b62000fb717909392919060201c565b6200049a33620004866200091f60201b620011b01760201c565b6200094360201b620011d41790919060201c565b505050670de0b6b3a7640000841115620004fb5760405162461bcd60e51b815260206004820152601760248201527f6d616e616765724375742065786365656473203130302500000000000000000060448201526064015b60405180910390fd5b6000620005126200096060201b620011fe1760201c565b845190915062000529908290602087019062001211565b50825162000541906001830190602086019062001211565b50815162000559906002830190602085019062001211565b50620005926301ffc9a760e01b60016200057d6200061e60201b62000ee71760201c565b6200064260201b62000f0b179092919060201c565b620005b56380ac58cd60e01b60016200057d6200061e60201b62000ee71760201c565b620005d863da84032b60e01b60016200057d6200061e60201b62000ee71760201c565b6000620005ef6200098460201b620012221760201c565b80546001600160a01b0319166001600160a01b0398909816979097178755505050506001909201555062001609565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b031980831614156200069e5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401620004f2565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600184015461ffff811690819060009060071615620007215750600381901c60009081526002870160205260409020545b60005b86518110156200088d5760008782815181106200074557620007456200144d565b60200260200101519050600081602001519050600082604001515111620007bb5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a206e6f2073656c6563746f7273207370656369666044820152621a595960ea1b6064820152608401620004f2565b6000816002811115620007d257620007d262001463565b14156200080257620007f78585848d620009a860201b6200124617909392919060201c565b909550935062000882565b600181600281111562000819576200081962001463565b141562000840576200083a828b62000b7a60201b620014321790919060201c565b62000882565b600281600281111562000857576200085762001463565b141562000882576200087c8585848d62000db460201b6200168e17909392919060201c565b90955093505b505060010162000724565b50828214620008aa5760018701805461ffff191661ffff84161790555b6007821615620008cd57600382901c600090815260028801602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738686866040516200090293929190620014a7565b60405180910390a16200091685856200107c565b50505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f790565b805160009081906001600160a01b0316301480620009e45750620009e483600001516001600160a01b03166200120b60201b6200047c1760201c565b62000a3e5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a204144442074617267657420686173206e6f20636044820152626f646560e81b6064820152608401620004f2565b60005b83604001515181101562000b6d5760008460400151828151811062000a6a5762000a6a6200144d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1562000af35760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460448201526219195960ea1b6064820152608401620004f2565b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781141562000b5d57600389901c600090815260028b0160205260408120989098555b5050506001958601950162000a41565b5093959294509192505050565b62000b9d81600001516001600160a01b03166200120b60201b6200047c1760201c565b62000bfb5760405162461bcd60e51b815260206004820152602760248201527f4469616d6f6e64426173653a205245504c4143452074617267657420686173206044820152666e6f20636f646560c81b6064820152608401620004f2565b60005b81604001515181101562000daf5760008260400151828151811062000c275762000c276200144d565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8062000ca45760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401620004f2565b6001600160a01b03811630141562000cf95760405162461bcd60e51b81526020600482015260226024820152600080516020620038e08339815191526044820152616c6560f01b6064820152608401620004f2565b84516001600160a01b038281169116141562000d695760405162461bcd60e51b815260206004820152602860248201527f4469616d6f6e64426173653a205245504c41434520746172676574206973206960448201526719195b9d1a58d85b60c21b6064820152608401620004f2565b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000bfe565b505050565b805160009081906001600160a01b03161562000e2b5760405162461bcd60e51b815260206004820152602f60248201527f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060448201526e6265207a65726f206164647265737360881b6064820152608401620004f2565b600385901c6007861660005b856040015151811015620010685760008660400151828151811062000e605762000e606200144d565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000edc5760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401620004f2565b606081901c30141562000f2c5760405162461bcd60e51b81526020600482015260226024820152600080516020620038e08339815191526044820152616c6560f01b6064820152608401620004f2565b8862000f5657600019909401600081815260028c0160205260409020549850936007935062000f5e565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000fb1576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146200101657600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c1790556200103a565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b866200105657600088815260028f01602052604081208190559b505b50506001909301925062000e37915050565b5060039190911b1796939550929350505050565b8051156001600160a01b0383161514620010f05760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460448201526d696f6e20706172616d657465727360901b6064820152608401620004f2565b6001600160a01b0382161562001207576001600160a01b0382163014620011955762001130826001600160a01b03166200120b60201b6200047c1760201c565b620011955760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760448201526d657420686173206e6f20636f646560901b6064820152608401620004f2565b6000826001600160a01b031682604051620011b19190620015ae565b600060405180830381855af49150503d8060008114620011ee576040519150601f19603f3d011682016040523d82523d6000602084013e620011f3565b606091505b505090508062000daf573d6000803e3d6000fd5b5050565b3b151590565b8280546200121f90620015cc565b90600052602060002090601f0160209004810192826200124357600085556200128e565b82601f106200125e57805160ff19168380011785556200128e565b828001600101855582156200128e579182015b828111156200128e57825182559160200191906001019062001271565b506200129c929150620012a0565b5090565b5b808211156200129c5760008155600101620012a1565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620012ea578181015183820152602001620012d0565b83811115620012fa576000848401525b50505050565b600082601f8301126200131257600080fd5b81516001600160401b03808211156200132f576200132f620012b7565b604051601f8301601f19908116603f011681019082821181831017156200135a576200135a620012b7565b816040528381528660208588010111156200137457600080fd5b62001387846020830160208901620012cd565b9695505050505050565b600080600080600060a08688031215620013aa57600080fd5b85516001600160a01b0381168114620013c257600080fd5b6020870151604088015191965094506001600160401b0380821115620013e757600080fd5b620013f589838a0162001300565b945060608801519150808211156200140c57600080fd5b6200141a89838a0162001300565b935060808801519150808211156200143157600080fd5b50620014408882890162001300565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6000815180845262001493816020860160208601620012cd565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156200157c57898403607f19018652815180516001600160a01b031685528381015189860190600381106200151857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620015665783516001600160e01b03191682529286019260019290920191908601906200153a565b50978501979550505090820190600101620014d0565b50506001600160a01b038a16908801528681036040880152620015a0818962001479565b9a9950505050505050505050565b60008251620015c2818460208701620012cd565b9190910192915050565b600181811c90821680620015e157607f821691505b602082108114156200160357634e487b7160e01b600052602260045260246000fd5b50919050565b6122c780620016196000396000f3fe6080604052600436106100cb5760003560e01c80638ab5150a11610074578063adfca15e1161004e578063adfca15e14610308578063cdffacc614610335578063f2fde38b1461038e576100d2565b80638ab5150a146102be5780638da5cb5b146102d357806391423765146102e8576100d2565b806352ef6b2c116100a557806352ef6b2c1461026557806379ba5097146102875780637a0ed6271461029c576100d2565b806301ffc9a7146101845780631f931c1c146101f25780632c40805914610214576100d2565b366100d257005b60006100dc6103ae565b90506001600160a01b0381163b6101605760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3660008037600080366000845af43d6000803e80801561017f573d6000f35b3d6000fd5b34801561019057600080fd5b506101dd61019f366004611c72565b6001600160e01b03191660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604090205460ff1690565b60405190151581526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611ced565b610482565b005b34801561022057600080fd5b507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b03165b6040516001600160a01b0390911681526020016101e9565b34801561027157600080fd5b5061027a610547565b6040516101e99190611d9f565b34801561029357600080fd5b50610212610724565b3480156102a857600080fd5b506102b16107bc565b6040516101e99190611e31565b3480156102ca57600080fd5b5061024d610c1e565b3480156102df57600080fd5b5061024d610c2d565b3480156102f457600080fd5b50610212610303366004611eae565b610c37565b34801561031457600080fd5b50610328610323366004611eae565b610ced565b6040516101e99190611ec9565b34801561034157600080fd5b5061024d610350366004611c72565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561039a57600080fd5b506102126103a9366004611eae565b610e73565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9360208190526040822054819060601c80610475575060038201546001600160a01b0316806104755760405162461bcd60e51b815260206004820152603260248201527f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060448201527f66756e6374696f6e207369676e617475726500000000000000000000000000006064820152608401610157565b9392505050565b3b151590565b61048a61196e565b6001600160a01b0316336001600160a01b0316146104ea5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b6105406104f78587611f9f565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105389250610f93915050565b929190610fb7565b5050505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156105aa576105aa611f0b565b6040519080825280602002602001820160405280156105d3578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561071c576000818152600285016020526040812054905b60088110156107075783610612816120e9565b600188015490955061ffff16851115905061062c57610707565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156106aa578a818151811061066e5761066e612104565b60200260200101516001600160a01b0316836001600160a01b0316141561069857600191506106aa565b806106a2816120e9565b915050610654565b5080156106b9575050506106f5565b818a89815181106106cc576106cc612104565b6001600160a01b0390921660209283029190910190910152876106ee816120e9565b9850505050505b806106ff816120e9565b9150506105ff565b50508080610714906120e9565b9150506105dc565b505082525090565b61072c6119a1565b6001600160a01b0316336001600160a01b0316146107b25760405162461bcd60e51b815260206004820152602960248201527f536166654f776e61626c653a2073656e646572206d757374206265206e6f6d6960448201527f6e6565206f776e657200000000000000000000000000000000000000000000006064820152608401610157565b6107ba6119c9565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561081f5761081f611f0b565b60405190808252806020026020018201604052801561086557816020015b60408051808201909152600081526060602082015281526020019060019003908161083d5790505b50600182015490925060009061ffff1667ffffffffffffffff81111561088d5761088d611f0b565b6040519080825280602002602001820160405280156108b6578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610bac576000818152600286016020526040812054905b6008811015610b9757836108f5816120e9565b600189015490955061ffff16851115905061090f57610b97565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b88811015610a5557826001600160a01b03168c828151811061095b5761095b612104565b6020026020010151600001516001600160a01b03161415610a4357838c828151811061098957610989612104565b6020026020010151602001518b83815181106109a7576109a7612104565b602002602001015160ff16815181106109c2576109c2612104565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a82815181106109f8576109f8612104565b602002602001015160ff1610610a0d57600080fd5b898181518110610a1f57610a1f612104565b602002602001018051809190610a349061211a565b60ff1690525060019150610a55565b80610a4d816120e9565b915050610937565b508015610a6457505050610b85565b818b8981518110610a7757610a77612104565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff811115610ab057610ab0611f0b565b604051908082528060200260200182016040528015610ad9578160200160208202803683370190505b508b8981518110610aec57610aec612104565b602002602001015160200181905250828b8981518110610b0e57610b0e612104565b602002602001015160200151600081518110610b2c57610b2c612104565b60200260200101906001600160e01b03191690816001600160e01b031916815250506001898981518110610b6257610b62612104565b60ff9092166020928302919091019091015287610b7e816120e9565b9850505050505b80610b8f816120e9565b9150506108e2565b50508080610ba4906120e9565b9150506108bf565b5060005b82811015610c13576000848281518110610bcc57610bcc612104565b602002602001015160ff1690506000878381518110610bed57610bed612104565b602002602001015160200151905081815250508080610c0b906120e9565b915050610bb0565b508185525050505090565b6000610c286119a1565b905090565b6000610c2861196e565b610c3f61196e565b6001600160a01b0316336001600160a01b031614610c9f5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610d5057610d50611f0b565b604051908082528060200260200182016040528015610d79578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610e69576000818152600285016020526040812054905b6008811015610e545783610db8816120e9565b600188015490955061ffff168511159050610dd257610e54565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610e415780888781518110610e1a57610e1a612104565b6001600160e01b03199092166020928302919091019091015285610e3d816120e9565b9650505b5080610e4c816120e9565b915050610da5565b50508080610e61906120e9565b915050610d82565b5050825250919050565b610e7b61196e565b6001600160a01b0316336001600160a01b031614610edb5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b610ee481611a90565b50565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415610f655760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610157565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600184015461ffff811690819060009060071615610fe75750600381901c60009081526002870160205260409020545b60005b865181101561112457600087828151811061100757611007612104565b602002602001015190506000816020015190506000826040015151116110955760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660448201527f69656400000000000000000000000000000000000000000000000000000000006064820152608401610157565b60008160028111156110a9576110a961213a565b14156110c5576110bb8a868685611246565b909550935061111a565b60018160028111156110d9576110d961213a565b14156110ee576110e98a83611432565b61111a565b60028160028111156111025761110261213a565b141561111a576111148a86868561168e565b90955093505b5050600101610fea565b508282146111405760018701805461ffff191661ffff84161790555b600782161561116257600382901c600090815260028801602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673868686604051611195939291906121ac565b60405180910390a16111a78585611a99565b50505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f790565b805160009081906001600160a01b031630148061126d575082516001600160a01b03163b15155b6112df5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360448201527f6f646500000000000000000000000000000000000000000000000000000000006064820152608401610157565b60005b8360400151518110156114255760008460400151828151811061130757611307612104565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156113a85760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460448201527f64656400000000000000000000000000000000000000000000000000000000006064820152608401610157565b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781141561141657600389901c600090815260028b0160205260408120989098555b505050600195860195016112e2565b5093959294509192505050565b80516001600160a01b03163b6114b05760405162461bcd60e51b815260206004820152602760248201527f4469616d6f6e64426173653a205245504c41434520746172676574206861732060448201527f6e6f20636f6465000000000000000000000000000000000000000000000000006064820152608401610157565b60005b816040015151811015611689576000826040015182815181106114d8576114d8612104565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806115535760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401610157565b6001600160a01b0381163014156115b75760405162461bcd60e51b815260206004820152602260248201527f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d757461626044820152616c6560f01b6064820152608401610157565b84516001600160a01b038281169116141561163a5760405162461bcd60e51b815260206004820152602860248201527f4469616d6f6e64426173653a205245504c41434520746172676574206973206960448201527f64656e746963616c0000000000000000000000000000000000000000000000006064820152608401610157565b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff919091161790556001016114b3565b505050565b805160009081906001600160a01b0316156117115760405162461bcd60e51b815260206004820152602f60248201527f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060448201527f6265207a65726f206164647265737300000000000000000000000000000000006064820152608401610157565b600385901c6007861660005b85604001515181101561195a5760008660400151828151811061174257611742612104565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6117bc5760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401610157565b606081901c30141561181b5760405162461bcd60e51b815260206004820152602260248201527f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d757461626044820152616c6560f01b6064820152608401610157565b8861184357600019909401600081815260028c0160205260409020549850936007935061184b565b600019909301925b600584901b89901b6000806001600160e01b0319808416908616146118a7576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461190a57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905561192e565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661194957600088815260028f01602052604081208190559b505b50506001909301925061171d915050565b5060039190911b1796939550929350505050565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890611992565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405133916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff191633178155610ee460007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce66178905b90815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b610ee481611c27565b8051156001600160a01b0383161514611b1a5760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460448201527f696f6e20706172616d65746572730000000000000000000000000000000000006064820152608401610157565b6001600160a01b03821615611c23576001600160a01b0382163014611bb6576001600160a01b0382163b611bb65760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760448201527f657420686173206e6f20636f64650000000000000000000000000000000000006064820152608401610157565b6000826001600160a01b031682604051611bd09190612275565b600060405180830381855af49150503d8060008114611c0b576040519150601f19603f3d011682016040523d82523d6000602084013e611c10565b606091505b5050905080611689573d6000803e3d6000fd5b5050565b610ee481610ee4817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890611a65565b80356001600160e01b031981168114611c6d57600080fd5b919050565b600060208284031215611c8457600080fd5b61047582611c55565b80356001600160a01b0381168114611c6d57600080fd5b60008083601f840112611cb657600080fd5b50813567ffffffffffffffff811115611cce57600080fd5b602083019150836020828501011115611ce657600080fd5b9250929050565b600080600080600060608688031215611d0557600080fd5b853567ffffffffffffffff80821115611d1d57600080fd5b818801915088601f830112611d3157600080fd5b813581811115611d4057600080fd5b8960208260051b8501011115611d5557600080fd5b60208301975080965050611d6b60208901611c8d565b94506040880135915080821115611d8157600080fd5b50611d8e88828901611ca4565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b81811015611de05783516001600160a01b031683529284019291840191600101611dbb565b50909695505050505050565b600081518084526020808501945080840160005b83811015611e265781516001600160e01b03191687529582019590820190600101611e00565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611ea057888303603f19018552815180516001600160a01b03168452870151878401879052611e8d87850182611dec565b9588019593505090860190600101611e58565b509098975050505050505050565b600060208284031215611ec057600080fd5b61047582611c8d565b6020808252825182820181905260009190848201906040850190845b81811015611de05783516001600160e01b03191683529284019291840191600101611ee5565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611f4457611f44611f0b565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f7357611f73611f0b565b604052919050565b600067ffffffffffffffff821115611f9557611f95611f0b565b5060051b60200190565b6000611fb2611fad84611f7b565b611f4a565b83815260208082019190600586811b860136811115611fd057600080fd5b865b818110156120c657803567ffffffffffffffff80821115611ff35760008081fd5b818a019150606082360312156120095760008081fd5b612011611f21565b61201a83611c8d565b8152868301356003811061202e5760008081fd5b81880152604083810135838111156120465760008081fd5b939093019236601f85011261205d57600092508283fd5b8335925061206d611fad84611f7b565b83815292871b8401880192888101903685111561208a5760008081fd5b948901945b848610156120af576120a086611c55565b8252948901949089019061208f565b918301919091525088525050948301948301611fd2565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156120fd576120fd6120d3565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415612131576121316120d3565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561216b578181015183820152602001612153565b8381111561217a576000848401525b50505050565b60008151808452612198816020860160208601612150565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b8481101561224557898703607f19018652825180516001600160a01b03168852848101516003811061221657634e487b7160e01b84526021600452602484fd5b8886015260409081015190880189905261223289890182611dec565b97505094830194918301916001016121d6565b5050506001600160a01b038916908701525050838103604085015261226a8186612180565b979650505050505050565b60008251612287818460208701612150565b919091019291505056fea2646970667358221220e5be7d30b567581afdcf5f98ac87cfed1eb2d35c809cc05c2e220f307baf31b164736f6c634300080800334469616d6f6e64426173653a2073656c6563746f7220697320696d6d75746162",
  "deployedBytecode": "0x6080604052600436106100cb5760003560e01c80638ab5150a11610074578063adfca15e1161004e578063adfca15e14610308578063cdffacc614610335578063f2fde38b1461038e576100d2565b80638ab5150a146102be5780638da5cb5b146102d357806391423765146102e8576100d2565b806352ef6b2c116100a557806352ef6b2c1461026557806379ba5097146102875780637a0ed6271461029c576100d2565b806301ffc9a7146101845780631f931c1c146101f25780632c40805914610214576100d2565b366100d257005b60006100dc6103ae565b90506001600160a01b0381163b6101605760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b3660008037600080366000845af43d6000803e80801561017f573d6000f35b3d6000fd5b34801561019057600080fd5b506101dd61019f366004611c72565b6001600160e01b03191660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604090205460ff1690565b60405190151581526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004611ced565b610482565b005b34801561022057600080fd5b507f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96546001600160a01b03165b6040516001600160a01b0390911681526020016101e9565b34801561027157600080fd5b5061027a610547565b6040516101e99190611d9f565b34801561029357600080fd5b50610212610724565b3480156102a857600080fd5b506102b16107bc565b6040516101e99190611e31565b3480156102ca57600080fd5b5061024d610c1e565b3480156102df57600080fd5b5061024d610c2d565b3480156102f457600080fd5b50610212610303366004611eae565b610c37565b34801561031457600080fd5b50610328610323366004611eae565b610ced565b6040516101e99190611ec9565b34801561034157600080fd5b5061024d610350366004611c72565b6001600160e01b03191660009081527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c90565b34801561039a57600080fd5b506102126103a9366004611eae565b610e73565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9360208190526040822054819060601c80610475575060038201546001600160a01b0316806104755760405162461bcd60e51b815260206004820152603260248201527f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060448201527f66756e6374696f6e207369676e617475726500000000000000000000000000006064820152608401610157565b9392505050565b3b151590565b61048a61196e565b6001600160a01b0316336001600160a01b0316146104ea5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b6105406104f78587611f9f565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105389250610f93915050565b929190610fb7565b5050505050565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff8111156105aa576105aa611f0b565b6040519080825280602002602001820160405280156105d3578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561071c576000818152600285016020526040812054905b60088110156107075783610612816120e9565b600188015490955061ffff16851115905061062c57610707565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156106aa578a818151811061066e5761066e612104565b60200260200101516001600160a01b0316836001600160a01b0316141561069857600191506106aa565b806106a2816120e9565b915050610654565b5080156106b9575050506106f5565b818a89815181106106cc576106cc612104565b6001600160a01b0390921660209283029190910190910152876106ee816120e9565b9850505050505b806106ff816120e9565b9150506105ff565b50508080610714906120e9565b9150506105dc565b505082525090565b61072c6119a1565b6001600160a01b0316336001600160a01b0316146107b25760405162461bcd60e51b815260206004820152602960248201527f536166654f776e61626c653a2073656e646572206d757374206265206e6f6d6960448201527f6e6565206f776e657200000000000000000000000000000000000000000000006064820152608401610157565b6107ba6119c9565b565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff81111561081f5761081f611f0b565b60405190808252806020026020018201604052801561086557816020015b60408051808201909152600081526060602082015281526020019060019003908161083d5790505b50600182015490925060009061ffff1667ffffffffffffffff81111561088d5761088d611f0b565b6040519080825280602002602001820160405280156108b6578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610bac576000818152600286016020526040812054905b6008811015610b9757836108f5816120e9565b600189015490955061ffff16851115905061090f57610b97565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b88811015610a5557826001600160a01b03168c828151811061095b5761095b612104565b6020026020010151600001516001600160a01b03161415610a4357838c828151811061098957610989612104565b6020026020010151602001518b83815181106109a7576109a7612104565b602002602001015160ff16815181106109c2576109c2612104565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a82815181106109f8576109f8612104565b602002602001015160ff1610610a0d57600080fd5b898181518110610a1f57610a1f612104565b602002602001018051809190610a349061211a565b60ff1690525060019150610a55565b80610a4d816120e9565b915050610937565b508015610a6457505050610b85565b818b8981518110610a7757610a77612104565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff811115610ab057610ab0611f0b565b604051908082528060200260200182016040528015610ad9578160200160208202803683370190505b508b8981518110610aec57610aec612104565b602002602001015160200181905250828b8981518110610b0e57610b0e612104565b602002602001015160200151600081518110610b2c57610b2c612104565b60200260200101906001600160e01b03191690816001600160e01b031916815250506001898981518110610b6257610b62612104565b60ff9092166020928302919091019091015287610b7e816120e9565b9850505050505b80610b8f816120e9565b9150506108e2565b50508080610ba4906120e9565b9150506108bf565b5060005b82811015610c13576000848281518110610bcc57610bcc612104565b602002602001015160ff1690506000878381518110610bed57610bed612104565b602002602001015160200151905081815250508080610c0b906120e9565b915050610bb0565b508185525050505090565b6000610c286119a1565b905090565b6000610c2861196e565b610c3f61196e565b6001600160a01b0316336001600160a01b031614610c9f5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc96805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc94546060907f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc939061ffff1667ffffffffffffffff811115610d5057610d50611f0b565b604051908082528060200260200182016040528015610d79578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610e69576000818152600285016020526040812054905b6008811015610e545783610db8816120e9565b600188015490955061ffff168511159050610dd257610e54565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610e415780888781518110610e1a57610e1a612104565b6001600160e01b03199092166020928302919091019091015285610e3d816120e9565b9650505b5080610e4c816120e9565b915050610da5565b50508080610e61906120e9565b915050610d82565b5050825250919050565b610e7b61196e565b6001600160a01b0316336001600160a01b031614610edb5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610157565b610ee481611a90565b50565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415610f655760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610157565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600184015461ffff811690819060009060071615610fe75750600381901c60009081526002870160205260409020545b60005b865181101561112457600087828151811061100757611007612104565b602002602001015190506000816020015190506000826040015151116110955760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a206e6f2073656c6563746f72732073706563696660448201527f69656400000000000000000000000000000000000000000000000000000000006064820152608401610157565b60008160028111156110a9576110a961213a565b14156110c5576110bb8a868685611246565b909550935061111a565b60018160028111156110d9576110d961213a565b14156110ee576110e98a83611432565b61111a565b60028160028111156111025761110261213a565b141561111a576111148a86868561168e565b90955093505b5050600101610fea565b508282146111405760018701805461ffff191661ffff84161790555b600782161561116257600382901c600090815260028801602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673868686604051611195939291906121ac565b60405180910390a16111a78585611a99565b50505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b7f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b190565b7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f790565b805160009081906001600160a01b031630148061126d575082516001600160a01b03163b15155b6112df5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a204144442074617267657420686173206e6f206360448201527f6f646500000000000000000000000000000000000000000000000000000000006064820152608401610157565b60005b8360400151518110156114255760008460400151828151811061130757611307612104565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156113a85760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460448201527f64656400000000000000000000000000000000000000000000000000000000006064820152608401610157565b85516001600160e01b0319838116600081815260208d90526040902060609390931b6bffffffffffffffffffffffff19168b1790925560058a901b60e090811692831c91831c1999909916179781141561141657600389901c600090815260028b0160205260408120989098555b505050600195860195016112e2565b5093959294509192505050565b80516001600160a01b03163b6114b05760405162461bcd60e51b815260206004820152602760248201527f4469616d6f6e64426173653a205245504c41434520746172676574206861732060448201527f6e6f20636f6465000000000000000000000000000000000000000000000000006064820152608401610157565b60005b816040015151811015611689576000826040015182815181106114d8576114d8612104565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806115535760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401610157565b6001600160a01b0381163014156115b75760405162461bcd60e51b815260206004820152602260248201527f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d757461626044820152616c6560f01b6064820152608401610157565b84516001600160a01b038281169116141561163a5760405162461bcd60e51b815260206004820152602860248201527f4469616d6f6e64426173653a205245504c41434520746172676574206973206960448201527f64656e746963616c0000000000000000000000000000000000000000000000006064820152608401610157565b5083516001600160e01b031992909216600090815260208690526040902060609290921b6bffffffffffffffffffffffff19166bffffffffffffffffffffffff919091161790556001016114b3565b505050565b805160009081906001600160a01b0316156117115760405162461bcd60e51b815260206004820152602f60248201527f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060448201527f6265207a65726f206164647265737300000000000000000000000000000000006064820152608401610157565b600385901c6007861660005b85604001515181101561195a5760008660400151828151811061174257611742612104565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6117bc5760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e64006044820152606401610157565b606081901c30141561181b5760405162461bcd60e51b815260206004820152602260248201527f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d757461626044820152616c6560f01b6064820152608401610157565b8861184357600019909401600081815260028c0160205260409020549850936007935061184b565b600019909301925b600584901b89901b6000806001600160e01b0319808416908616146118a7576001600160e01b03198316600090815260208f90526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461190a57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905561192e565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661194957600088815260028f01602052604081208190559b505b50506001909301925061171d915050565b5060039190911b1796939550929350505050565b60007f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605b546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890611992565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405133916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3805473ffffffffffffffffffffffffffffffffffffffff191633178155610ee460007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce66178905b90815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b610ee481611c27565b8051156001600160a01b0383161514611b1a5760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460448201527f696f6e20706172616d65746572730000000000000000000000000000000000006064820152608401610157565b6001600160a01b03821615611c23576001600160a01b0382163014611bb6576001600160a01b0382163b611bb65760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760448201527f657420686173206e6f20636f64650000000000000000000000000000000000006064820152608401610157565b6000826001600160a01b031682604051611bd09190612275565b600060405180830381855af49150503d8060008114611c0b576040519150601f19603f3d011682016040523d82523d6000602084013e611c10565b606091505b5050905080611689573d6000803e3d6000fd5b5050565b610ee481610ee4817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890611a65565b80356001600160e01b031981168114611c6d57600080fd5b919050565b600060208284031215611c8457600080fd5b61047582611c55565b80356001600160a01b0381168114611c6d57600080fd5b60008083601f840112611cb657600080fd5b50813567ffffffffffffffff811115611cce57600080fd5b602083019150836020828501011115611ce657600080fd5b9250929050565b600080600080600060608688031215611d0557600080fd5b853567ffffffffffffffff80821115611d1d57600080fd5b818801915088601f830112611d3157600080fd5b813581811115611d4057600080fd5b8960208260051b8501011115611d5557600080fd5b60208301975080965050611d6b60208901611c8d565b94506040880135915080821115611d8157600080fd5b50611d8e88828901611ca4565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b81811015611de05783516001600160a01b031683529284019291840191600101611dbb565b50909695505050505050565b600081518084526020808501945080840160005b83811015611e265781516001600160e01b03191687529582019590820190600101611e00565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611ea057888303603f19018552815180516001600160a01b03168452870151878401879052611e8d87850182611dec565b9588019593505090860190600101611e58565b509098975050505050505050565b600060208284031215611ec057600080fd5b61047582611c8d565b6020808252825182820181905260009190848201906040850190845b81811015611de05783516001600160e01b03191683529284019291840191600101611ee5565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611f4457611f44611f0b565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611f7357611f73611f0b565b604052919050565b600067ffffffffffffffff821115611f9557611f95611f0b565b5060051b60200190565b6000611fb2611fad84611f7b565b611f4a565b83815260208082019190600586811b860136811115611fd057600080fd5b865b818110156120c657803567ffffffffffffffff80821115611ff35760008081fd5b818a019150606082360312156120095760008081fd5b612011611f21565b61201a83611c8d565b8152868301356003811061202e5760008081fd5b81880152604083810135838111156120465760008081fd5b939093019236601f85011261205d57600092508283fd5b8335925061206d611fad84611f7b565b83815292871b8401880192888101903685111561208a5760008081fd5b948901945b848610156120af576120a086611c55565b8252948901949089019061208f565b918301919091525088525050948301948301611fd2565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156120fd576120fd6120d3565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415612131576121316120d3565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561216b578181015183820152602001612153565b8381111561217a576000848401525b50505050565b60008151808452612198816020860160208601612150565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b8481101561224557898703607f19018652825180516001600160a01b03168852848101516003811061221657634e487b7160e01b84526021600452602484fd5b8886015260409081015190880189905261223289890182611dec565b97505094830194918301916001016121d6565b5050506001600160a01b038916908701525050838103604085015261226a8186612180565b979650505050505050565b60008251612287818460208701612150565b919091019291505056fea2646970667358221220e5be7d30b567581afdcf5f98ac87cfed1eb2d35c809cc05c2e220f307baf31b164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization function call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional target of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "getFallbackAddress()": {
        "returns": {
          "_0": "fallback address"
        }
      },
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "setFallbackAddress(address)": {
        "params": {
          "fallbackAddress": "fallback address"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update diamond facets and optionally execute arbitrary initialization function"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "getFallbackAddress()": {
        "notice": "get the address of the fallback contract"
      },
      "nomineeOwner()": {
        "notice": "get the nominated owner who has permission to call acceptOwnership"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "setFallbackAddress(address)": {
        "notice": "set the address of the fallback contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}